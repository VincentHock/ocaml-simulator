(* 
                         CS 51 Final Project
                         MiniML -- Evaluation
*)

(* This module implements a small untyped ML-like language under
   various operational semantics.
 *)

open Expr ;;
  
(* Exception for evaluator runtime, generated by a runtime error in
   the interpreter *)
exception EvalError of string ;;
  
(* Exception for evaluator runtime, generated by an explicit `raise`
   construct in the object language *)
exception EvalException ;;

(*......................................................................
  Environments and values 
 *)

module type ENV = sig
    (* the type of environments *)
    type env
	   
    (* the type of values (including closures) stored in
       environments *)
    type value =
      | Val of expr
      | Closure of (expr * env)
   
    (* empty () -- Returns an empty environment *)
    val empty : unit -> env

    (* close expr env -- Returns a closure for `expr` and its `env` *)
    val close : expr -> env -> value

    (* lookup env varid -- Returns the value in the `env` for the
       `varid`, raising an `Eval_error` if not found *)
    val lookup : env -> varid -> value

    (* extend env varid loc -- Returns a new environment just like
       `env` except that it maps the variable `varid` to the `value`
       stored at `loc`. This allows later changing the value, an
       ability used in the evaluation of `letrec`. To make good on
       this, extending an environment needs to preserve the previous
       bindings in a physical, not just structural, way. *)
    val extend : env -> varid -> value ref -> env

    (* env_to_string env -- Returns a printable string representation
       of environment `env` *)
    val env_to_string : env -> string
                                 
    (* value_to_string ?printenvp value -- Returns a printable string
       representation of a value; the optional flag `printenvp`
       (default: `true`) determines whether to include the environment
       in the string representation when called on a closure *)
    val value_to_string : ?printenvp:bool -> value -> string
  end

module Env : ENV =
  struct
    type env = (varid * value ref) list
     and value =
       | Val of expr
       | Closure of (expr * env)

    let empty () : env = []

    let close (exp : expr) (env : env) : value =
      Closure (exp, env)

    let lookup (env : env) (varname : varid) : value =
      match List.assoc_opt varname env with
      | Some v -> !v
      | None -> raise (EvalError ("no value associated with key " ^ varname))

    let extend (env : env) (varname : varid) (loc : value ref) : env =
      let cleaned = List.remove_assoc varname env in
      (varname, loc) :: cleaned ;;
      
    let rec value_to_string ?(printenvp : bool = true) (v : value) : string =
      match v with
      | Val (expr) -> exp_to_abstract_string expr
      | Closure (expr, env) -> 
         if printenvp then exp_to_abstract_string expr ^ "where" ^ env_to_string env
         else exp_to_abstract_string expr

    and env_to_string (env : env) : string =
      match env with
        | [] -> "{}"
        | (key, v) :: [] -> key ^ "->" ^ value_to_string !v
        | (key, v) :: tl -> key ^ "->" ^ value_to_string !v ^ ", " ^ env_to_string tl 
  end 

(*......................................................................
  Evaluation functions

  Each of the evaluation functions below evaluates an expression `exp`
  in an environment `env` returning a result of type `value`. We've
  provided an initial implementation for a trivial evaluator, which
  just converts the expression unchanged to a `value` and returns it,
  along with "stub code" for three more evaluators: a substitution
  model evaluator and dynamic and lexical environment model versions.

  Each evaluator is of type `expr -> Env.env -> Env.value` for
  consistency, though some of the evaluators don't need an
  environment, and some will only return values that are "bare
  values" (that is, not closures). 

  DO NOT CHANGE THE TYPE SIGNATURES OF THESE FUNCTIONS. Compilation
  against our unit tests relies on their having these signatures. If
  you want to implement an extension whose evaluator has a different
  signature, implement it as `eval_e` below.  *)

(* The TRIVIAL EVALUATOR, which leaves the expression to be evaluated
   essentially unchanged, just converted to a value for consistency
   with the signature of the evaluators. *)
  
let eval_t (exp : expr) (_env : Env.env) : Env.value =
  (* coerce the expr, unchanged, into a value *)
  Env.Val exp ;;

let unop op a : expr =
  match a with
  | Bool b -> if op = BNegate then Bool (not b) 
              else raise (EvalError "invalid negation for bool")
  | Num n ->  if op = INegate then Num (~-n) 
              else raise (EvalError "invalid negation for int")
  | Float f -> if op = FNegate then Float (~-.f) 
              else raise (EvalError "invalid negation for float")
  | _ -> raise (EvalError "invalid operand") ;;
  

let binop op x y : expr =
  match x, y with
  | Num a, Num b -> 
      (match op with
      | Plus -> Num (a + b)
      | Minus -> Num (a - b)
      | Times -> Num (a * b)
      | Divide -> Num (a / b)
      | Equals -> Bool (a = b)
      | LessThan -> Bool (a < b)
      | GreaterThan -> Bool (a > b)
      | _ -> raise (EvalError "invalid binop operator"))
  | Float a, Float b -> 
      (match op with
      | FPlus -> Float (a +. b)
      | FMinus -> Float (a -. b)
      | FTimes -> Float (a *. b)
      | FDivide -> Float (a /. b)
      | Equals -> Bool (a = b)
      | LessThan -> Bool (a < b)
      | GreaterThan -> Bool (a > b)
      | _ -> raise (EvalError "invalid binop operator"))
  | Bool a, Bool b ->
      (match op with 
      | Equals -> Bool (a = b)
      | _ -> raise (EvalError "invalid binop operator"))
  | _ -> raise (EvalError "binop on invalid input") ;;

(* The SUBSTITUTION MODEL evaluator *)
let eval_s (exp : expr) (_env : Env.env) : Env.value =
  let rec eval (exp : expr) = 
    match exp with
    | Var v -> raise (EvalError ("unbound variable " ^ v))
    | Float _ | Num _ | Bool _ | Fun _ -> exp
    | Unop (op, e) -> unop op (eval e)
    | Binop (op, e1, e2) -> binop op (eval e1) (eval e2)
    | Conditional (pred, res1, res2) -> 
        (match eval pred with
        | Bool b -> if b then eval res1 else eval res2 
        | _ -> raise (EvalError "non-boolean conditional"))
    | Let (var, def, body) -> eval (subst var def body)
    | Letrec (var, def, body) -> 
        let temp = Letrec (var, def, Var var) in
        let recursive = subst var temp def in
        eval (subst var recursive body)
    | App (f, e) -> 
        (match (eval f) with 
        | Fun (var, ef)-> eval (subst var (eval e) ef)
        | _ -> raise (EvalError "application requires a function"))
    | Raise | Unassigned -> raise EvalException
  in
  Env.Val (eval exp) ;;
     
(* eval_s and eval_d commonalities *)
let abstract (exp : expr) (env : Env.env) (evaluator) =
  match exp with
  | Float _ | Num _ | Bool _ -> Env.Val exp
  | Var v -> Env.lookup env v
  | Unop (op, e) -> 
      (match evaluator e env with
      | Env.Val (expr) -> Env.Val (unop op expr)
      | Env.Closure _ -> raise (EvalError "cannot perform op on closure"))
  | Binop (op, e1, e2) ->
      (match evaluator e1 env, evaluator e2 env with
      | Env.Val (expr1), Env.Val (expr2) -> Env.Val (binop op expr1 expr2)
      | _, _ -> raise (EvalError "cannot perform op on closure"))
  | Conditional (pred, res1, res2) -> 
      (match evaluator pred env with
      | Env.Val (Bool b) -> if b then evaluator res1 env 
                        else evaluator res2 env
      | _ -> raise (EvalError "non-boolean conditional"))
  | Let (var, def, body) -> 
      let vd = evaluator def env in
      let extended = Env.extend env var (ref vd) in
      evaluator body extended
  | Fun _ | App _ | Letrec _ -> raise (EvalError "failure")
  | Raise | Unassigned -> raise EvalException ;;

(* The DYNAMICALLY-SCOPED ENVIRONMENT MODEL evaluator *)
let rec eval_d (exp : expr) (env : Env.env) : Env.value =
  match exp with
  | Float _ | Num _ | Bool _ | Var _ | Unop _ | Binop _ 
  | Conditional _ | Let _ | Raise | Unassigned -> abstract exp env eval_d
  | Fun _ -> Env.Val exp
  | Letrec (var, def, body) -> 
      let vd = eval_d def env in
      let extended = Env.extend env var (ref vd) in
      eval_d body extended
  | App (f, e) -> 
      (match eval_d f env with
      | Env.Val (Fun (var, body)) -> 
          let vq = eval_d e env in
          let extended = Env.extend env var (ref vq) in
          eval_d body extended
      | _ -> raise (EvalError "application requires a function")) ;;

(* The LEXICALLY-SCOPED ENVIRONMENT MODEL evaluator  *)
let rec eval_l (exp : expr) (env : Env.env) : Env.value =
  match exp with
  | Float _ | Num _ | Bool _ | Var _ | Unop _ | Binop _ 
  | Conditional _ | Let _ | Raise | Unassigned -> abstract exp env eval_l 
  | Fun _ -> Env.close exp env
  | App (f, e) ->
      (let fe = eval_l f env in
      let vq = eval_l e env in
      match fe with
      | Env.Closure (Fun (x, def), lenv) -> eval_l def (Env.extend lenv x (ref vq))
      | _ -> raise (EvalError "invalid lexical function application"))
  | Letrec (var, def, body) -> 
      let u = ref (Env.Val Unassigned) in
      let env_x = Env.extend env var u in
      let vd = eval_l def env_x in
      u := vd ;
      eval_l body env_x ;;
  
(* Connecting the evaluators to the external world. The REPL in
   `miniml.ml` uses a call to the single function `evaluate` defined
   here. Initially, `evaluate` is the trivial evaluator `eval_t`. But
   you can define it to use any of the other evaluators as you proceed
   to implement them. (We will directly unit test the four evaluators
   above, not the `evaluate` function, so it doesn't matter how it's
   set when you submit your solution.) *)
   
let evaluate = eval_t ;;
